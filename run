#!/bin/bash -e

APP_NAME='phalcon-api'

check_db() {
  if [ "$(docker exec -ti "$APP_NAME" bash -c "cli Common:CheckDbState" 2>&1)" == 1 ]; then
    DB_STATUS=1
  else
    echo "Waiting for database..."
    for i in {1..60}; do
      sleep 1
      if [ "$(docker exec -ti "$APP_NAME" bash -c "cli Common:CheckDbState" 2>&1)" == 1 ]; then
        DB_STATUS=1
        return
      fi
    done
    echo "Couldn't connect to DB."
  fi
}

if [ -z "$1" ]; then

  echo "
Docker arguments:
  ${0} up     - run app
  ${0} exec   - exec to $APP_NAME
  ${0} ps     - docker ps -a
  ${0} down   - stop app
  ${0} build  - rebuild project
  ${0} clear  - clear data folder (may need to be run with sudo on Linux)

CLI:
  ${0} cli {task} {...params}

Testing arguments:
  ${0} test             - run full test (cs && unit)
  ${0} cs               - run Code Sniffers tests
  ${0} cs fix           - run code autofix
  ${0} cs {dir}         - run Code Sniffers in exact directory
  ${0} unit             - run paratest
  ${0} unit {test_name} - run exact test class or test method
"
  exit

elif [ "$1" == "up" ]; then

  docker-compose down
  docker-compose up -d
  docker exec -ti "$APP_NAME" bash -c "composer install"

  check_db
  if [ "$DB_STATUS" == "1" ]; then
    docker exec -ti "$APP_NAME" bash -c "cli migration:run"
  else
    echo "Please run migration manually."
  fi

elif [ "$1" == "exec" ]; then
  docker exec -ti "$APP_NAME" bash
elif [ "$1" == "ps" ]; then
  docker ps -a
elif [ "$1" == "build" ]; then

  docker-compose down
  docker-compose up --build -d
  docker exec -ti "$APP_NAME" bash -c "composer install"

  check_db
  if [ "$DB_STATUS" == "1" ]; then
    docker exec -ti "$APP_NAME" bash -c "cli migration:run"
  else
    echo "Please run migration manually."
  fi

elif [ "$1" == "clear" ]; then

  PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/data"

  STRUCTURE=(
    "mysql"
    "log"
  )

  for FILE in $PATH/*; do
    echo "Removing "$FILE;
    /bin/rm -rf $FILE
  done;

  for DIR in ${STRUCTURE[@]}; do
    echo "Creating dir" $DIR;
    /bin/mkdir $PATH/$DIR
    /bin/chmod 0777 $PATH/$DIR
    > $PATH/$DIR/.gitkeep
  done

elif [ "$1" == "down" ]; then
  docker-compose down
elif [ "$1" == "cs" ] && [ -z "$2" ]; then
  docker exec -ti "$APP_NAME" bash -c "cs"
elif [ "$1" == "cs" ]; then
  docker exec -ti "$APP_NAME" bash -c "cs $2"
elif [ "$1" == "unit" ] && [ -z "$2" ]; then
  docker exec -ti "$APP_NAME" bash -c "unit"
elif [ "$1" == "unit" ]; then
  docker exec -ti "$APP_NAME" bash -c "unit $2"
elif [ "$1" == "test" ]; then
  docker exec -ti "$APP_NAME" bash -c "cs && unit"
elif [ "$1" == "cli" ]; then
  if [ -z "$2" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1"
  elif [ -z "$3" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2"
  elif [ -z "$4" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3"
  elif [ -z "$5" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3 $4"
  elif [ -z "$6" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3 $4 $5"
  elif [ -z "$7" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3 $4 $5 $6"
  elif [ -z "$8" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3 $4 $5 $6 $7"
  elif [ -z "$9" ]; then
    docker exec -ti "$APP_NAME" bash -c "$1 $2 $3 $4 $5 $6 $7 $8"
  fi
else
  echo "Argument \"$1\" not found"
fi